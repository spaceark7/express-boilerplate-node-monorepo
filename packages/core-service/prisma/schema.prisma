// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


//#region Users
model User {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  email     String   @unique @db.VarChar(50)
  password  String   @db.VarChar(200)
  profile   Profile?
  groupId   Int     
  group     Group    @relation(fields: [groupId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("SysUsers")
}
model Group {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(50)
  users     User[]
  menus     MenuGroup[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  deletedBy String?

  @@map("SysGroups")
}
model Profile {
  id              Int      @id @default(autoincrement())
  firstName       String?  @db.VarChar(50)
  lastName        String?  @db.VarChar(50)
  phone           String?   @db.VarChar(15)
  emailSecondary  String?   @db.VarChar(50)
  userId          Int      @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("SysProfiles")
}
//#endregion Users

//#region Menu
model MenuGroup {
  id        Int      @id @default(autoincrement())
  groupId   Int
  menuId    Int
  isActive  Boolean  @default(false)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  menu      Menu     @relation(fields: [menuId], references: [id], onDelete: NoAction)
  access    MenuGroupAccess[]

  @@unique([groupId, menuId]) // Prevent duplicates

  @@map("SysMenuGroups")
}
model Menu {
  id            Int           @id @default(autoincrement())
  parentId      Int?
  parent        Menu?         @relation("MenuHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children      Menu[]        @relation("MenuHierarchy")
  description   String?       @db.VarChar(80)
  name          String        @db.VarChar(50)
  label         String        @db.VarChar(50)
  icon          String?        @db.VarChar(50)
  path          String        @db.VarChar(100)
  acls          MenuAccessLevel[]
  orderNumber   Int?          
  groups        MenuGroup[]  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
  deletedBy     String?

  @@map("SysMenus")
}
model AccessLevel {
  id          Int              @id @default(autoincrement())
  code        String           
  description String?          @db.VarChar(80)
  menus       MenuAccessLevel[]
  groupAccess MenuGroupAccess[]

  @@index([code])
  @@map("SysAccessLevels")
}
model MenuAccessLevel {
  id            Int         @id @default(autoincrement())
  menuId        Int
  accessLevelId Int
  menu          Menu        @relation(fields: [menuId], references: [id], onDelete: Cascade)
  accessLevel   AccessLevel @relation(fields: [accessLevelId], references: [id], onDelete: Cascade)
  
  @@unique([menuId, accessLevelId]) // Each access level can only be assigned once per menu
  @@map("SysMenuAccessLevels")
}
model MenuGroupAccess {
  id             Int         @id @default(autoincrement())
  menuGroupId    Int
  accessLevelId  Int
  menuGroup      MenuGroup   @relation(fields: [menuGroupId], references: [id], onDelete: Cascade)
  accessLevel    AccessLevel @relation(fields: [accessLevelId], references: [id], onDelete: Cascade)

  @@unique([menuGroupId, accessLevelId]) // Prevent duplicates

  @@map("SysMenuGroupAccess")
}

//#endregion Menu
